# beNNch - Unified execution, collection, analysis and
# comparison of neural network simulation benchmarks.
# Copyright (C) 2021 Forschungszentrum Juelich GmbH, INM-6

# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
# This program is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE. See the GNU General Public License for more details.
# You should have received a copy of the GNU General Public License along with
# this program. If not, see <https://www.gnu.org/licenses/>.

# SPDX-License-Identifier: GPL-3.0-or-later

# include-path: # not working due to a bug in JUBE. Uncomment after next release! 
#   path: 
#    - ../helpers/
#    - ../config/

name: continuous microcircuit
# model-specific name and output path
outpath: ../../benchmark_results/cont_microcircuit
parameterset:
     name: model_commands
     parameter:
         - {name: run_file, type: string, _: "${jube_wp_abspath}/bm_run_microcircuit.py"}
         - {name: log_path, type: string, _: "${jube_wp_abspath}/data"}          
fileset:
# load and copy model-specific files
     name: model_files
     copy:
      - $model_path/bm_run_microcircuit.py
      - $model_path/bm_helpers.py
      - $model_path/sim_params.py
      - $model_path/network_params.py
      - $model_path/helpers.py
      - $model_path/network.py
      - $model_path/stimulus_params.py

# This subsituteset maps the parameters that were defined in this yaml
# file to the target patterns that JUBE will search for in the
# simulation files. The pattern file is bm_run_microcircuit.py which is
# also the wrapper file for the actual microcircuit simulation. The
# source pattern will be replaced by the value contained in dest 
substituteset:
      name: simulation_substitutions
      iofile: {in: bm_run_microcircuit.py, out: bm_run_microcircuit.py}
      sub:
      - {source: "{record_spikes}", dest: $record_spikes}
      - {source: "{POISSON_INPUT}", dest: $poisson_input}
      - {source: "{kwds}", dest: $kwds}
      - {source: "{V0_TYPE}", dest: $V0_type}
      - {source: "{SYNAPSE_TYPE}", dest: $synapse_type}
      - {source: "{model_time_sim}", dest: $model_time_sim}
      - {source: "{model_time_presim}", dest: $model_time_presim}
      - {source: "{rng_seed}", dest: $rng_seed}
      - {source: "{threads_per_task}", dest: $threads_per_task}
      - {source: "{N_SCALING}", dest: $scale_N}
      - {source: "{K_SCALING}", dest: $scale_K}
      - {source: "{resolution}", dest: $resolution}
      

step:
# build step
    - name: build
      export: true
      use:
      - from: ../config/user_config.yaml
        _: user_config
      - from: ../config/cont_microcircuit_config.yaml
        _: file_paths,model_parameters,software_parameters
      - from: ../helpers/helpers.yaml
        _: slurm_build,run_build,files,sub_build_job
      do:
        - /p/home/jusers/groenbekk1/jusuf/Builder/build.sh --get --silent ${simulator} ${version} ${variant} ${suffix} && export DEP=`$submit_cmd --parsable $job_file`

# benchmark step
    - name: bench
      depend: build
      use:
      - model_commands
      - from: ../config/user_config.yaml
        _: user_config
      - from: ../config/cont_microcircuit_config.yaml
        _: file_paths,model_parameters,machine_parameters
      - from: ../helpers/helpers.yaml
        _: slurm_bench,run_benchmark,files,sub_bench_job,scaling_experiment,init_job_file_variables
      - model_files,simulation_substitutions
      do:
        done_file: $ready_file
        _: $submit_cmd --dependency=afterok:$$DEP $job_file 

# analysis step
analyser:
      name: analyse
      use:
        - from: ../helpers/helpers.yaml
          _: timer_pattern
      analyse:
        step: bench
        file: timer_data.txt

# result step 
result:
      name: result
      use: analyse
      table:
        name: result_table
        style: csv
        sort: number
        column:
        - rng_seed
        - num_nodes
        - threads_per_task
        - tasks_per_node
        - model_time_sim
        - wall_time_create
        - wall_time_connect
        - wall_time_sim
        - wall_time_phase_collocate
        - wall_time_phase_communicate
        - wall_time_phase_deliver
        - wall_time_phase_update
        - wall_time_communicate_target_data
        - wall_time_gather_spike_data
        - wall_time_gather_target_data
        - wall_time_communicate_prepare
        - py_time_network
        - py_time_simulate
        - py_time_presimulate
        - py_time_create
        - py_time_connect
        - base_memory
        - network_memory
        - init_memory
        - total_memory
        - num_connections
        - local_spike_counter
        - e_counter
